#!/usr/bin/env python




#This is the secrete to eternal live 1/2
import os,sys
pwd = os.path.dirname(os.path.realpath(__file__))
sys.path.append(pwd)

##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1342533446.612
__CHEETAH_genTimestamp__ = 'Tue Jul 17 15:57:26 2012'
__CHEETAH_src__ = 'genericHeaders.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Jul 13 15:44:20 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class genericHeaders(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(genericHeaders, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    @staticmethod
    def InsertFileHeader(Name, Ext, Brief='TODO', **KWS):



        ## CHEETAH: generated from #def InsertFileHeader($Name, $Ext, $Brief = 'TODO') at line 55, col 1.
        trans = DummyTransaction()
        _dummyTrans = True
        write = trans.response().write
        SL = [KWS]
        _filter = lambda x, **kwargs: unicode(x)
        
        ########################################
        ## START - generated method body
        
        write(u'''/*_____________________________________________________________________________________

    \\file     ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Name",True) # u'${Name}' on line 58, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${Name}')) # from line 58, col 15.
        _v = VFSL([locals()]+SL+[globals(), builtin],"Ext",True) # u'${Ext}' on line 58, col 22
        if _v is not None: write(_filter(_v, rawExpr=u'${Ext}')) # from line 58, col 22.
        write(u'''

    \\brief    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Brief",True) # u'$Brief' on line 60, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'$Brief')) # from line 60, col 15.
        write(u'''

    Copyright (c) 2012  Source Scientific, LLC. All rights reserved

    $LastChangedDate:  $
    $Rev:  $
    $URL:  $
______________________________________________________________________________________*/''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @staticmethod
    def InsertFunctionHeader(Class, Name, Brief='TODO', Params=None, Return=None, Int='', **KWS):



        ## CHEETAH: generated from #def InsertFunctionHeader($Class, $Name, $Brief = 'TODO', $Params = None, $Return = None, $Int = '') at line 79, col 1.
        trans = DummyTransaction()
        _dummyTrans = True
        write = trans.response().write
        SL = [KWS]
        _filter = lambda x, **kwargs: unicode(x)
        
        ########################################
        ## START - generated method body
        
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 80, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 80, col 1.
        write(u'''////////////////////////////////////////////////////////////////////////////////
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 81, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 81, col 1.
        write(u'''/*!   \\fn  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Class",True) # u'${Class}' on line 81, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${Class}')) # from line 81, col 16.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Name",True) # u'${Name}' on line 81, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${Name}')) # from line 81, col 26.
        write(u'''()

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 83, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 83, col 1.
        write(u'''      \\brief ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Brief",True) # u'${Brief}' on line 83, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${Brief}')) # from line 83, col 18.
        write(u'''

''')
        if VFSL([locals()]+SL+[globals(), builtin],"Params",True) == None: # generated from line 85, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 86, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 86, col 1.
            write(u'''      \\param n/a
''')
        else: # generated from line 87, col 1
            for p in VFSL([locals()]+SL+[globals(), builtin],"Params",True): # generated from line 88, col 1
                _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 89, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 89, col 1.
                write(u'''      \\param ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"p",True) # u'$p' on line 89, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'$p')) # from line 89, col 18.
                write(u''' - TODO
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"Return",True) == None: # generated from line 93, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 94, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 94, col 1.
            write(u'''      \\return n/a
''')
        else: # generated from line 95, col 1
            _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 96, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 96, col 1.
            write(u'''      \\return ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Return",True) # u'$Return' on line 96, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$Return')) # from line 96, col 19.
            write(u'''
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 98, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 98, col 1.
        write(u'''*/
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 99, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 99, col 1.
        write(u'''////////////////////////////////////////////////////////////////////////////////''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    @staticmethod
    def InsertClassHeader(Class, Brief='TODO', Author='TODO', Int='', **KWS):



        ## CHEETAH: generated from #def InsertClassHeader($Class, $Brief = 'TODO', $Author = 'TODO', $Int = '') at line 111, col 1.
        trans = DummyTransaction()
        _dummyTrans = True
        write = trans.response().write
        SL = [KWS]
        _filter = lambda x, **kwargs: unicode(x)
        
        ########################################
        ## START - generated method body
        
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 112, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 112, col 1.
        write(u'''////////////////////////////////////////////////////////////////////////////////
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 113, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 113, col 1.
        write(u'''/*!   \\fn  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Class",True) # u'${Class}' on line 113, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${Class}')) # from line 113, col 16.
        write(u'''

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 115, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 115, col 1.
        write(u'''      \\brief ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Brief",True) # u'${Brief}' on line 115, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${Brief}')) # from line 115, col 18.
        write(u'''

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 117, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 117, col 1.
        write(u'''      \\author ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Author",True) # u'${Author}' on line 117, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${Author}')) # from line 117, col 19.
        write(u'''
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 118, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 118, col 1.
        write(u'''*/
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"Int",True) # u'$Int' on line 119, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$Int')) # from line 119, col 1.
        write(u'''////////////////////////////////////////////////////////////////////////////////''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  ####################################################################
        #  Template for the generic header used accross the templates
        #  ####################################################################
        write(u'''
''')
        # 
        #     Before you can use this template you have to compile it with
        # 
        #         cheetah compile [genericHeaders.tmpl]
        #     
        #     and you have to add to he top of the generated genericHeaders.py 
        #     the following:
        #     
        #         #This is the secrete to eternal live 1/2
        #         import os,sys
        #         pwd = os.path.dirname(os.path.realpath(__file__))
        #         sys.path.append(pwd)
        #     
        #     This is due to the subfolders the modules are sitting in.
        #     Consider this folder structure:
        #     
        #         root
        #         |  |
        #         |  |------ modules
        #         |
        #         |--------- templates
        #         
        #         If you want to call from a function/class in modules a 
        #         function/class in templates then you have to add templates and 
        #         modules as folder to sys.path with the append() function
        #         
        #     Also you have to add this:
        #     
        #         ##This is the secret to eternal live 2/2 
        #         #implements respond
        #         
        #     in the child class (e.g. hsmService.tmpl) and also compile it with
        #     cheetah. Without this the .respond() function in the base class, 
        #     i.e this one, will be overriden by the default .respond() method 
        #     in the Cheetah.Template module and you will get no output in the 
        #     child class
        #     
        #     All the def's must be @staticmethods.
        #     
        write(u'''
''')
        #  
        #     #####################################################################
        # 
        #     File header
        # 
        #     #####################################################################
        write(u'''

''')
        #  
        #     #####################################################################
        # 
        #     Function header
        # 
        #     #####################################################################
        write(u'''

''')
        #  
        #     #####################################################################
        # 
        #     Class header
        # 
        #     #####################################################################
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_genericHeaders= 'respond'

## END CLASS DEFINITION

if not hasattr(genericHeaders, '_initCheetahAttributes'):
    templateAPIClass = getattr(genericHeaders, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(genericHeaders)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=genericHeaders()).run()


