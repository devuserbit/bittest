#!/usr/bin/env python




#This is the secrete to eternal live 1/2
import os,sys
pwd = os.path.dirname(os.path.realpath(__file__))
sys.path.append(pwd)

##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from templates import genericHeaders
from genericHeaders import genericHeaders

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1342432366.155
__CHEETAH_genTimestamp__ = 'Mon Jul 16 11:52:46 2012'
__CHEETAH_src__ = 'templates\\hsmService_cc.tmpl'
__CHEETAH_srcLastModified__ = 'Mon Jul 16 11:52:30 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class hsmService_cc(genericHeaders):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(hsmService_cc, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #     This is the template for the hsm service
        # 
        #     This is the secret to eternal live 2/2
        #     
        #     Without this you will get no output from the
        #     def's in the parent class
        write(u'''
''')
        #  ############################
        #  Get file header
        #  ############################
        todo = 'TODO'
        bmarker = '#^'
        emarker = '^#'
        service = 'Service'
        name = 'CHSM' + VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True) + VFSL([locals()]+SL+[globals(), builtin],"service",True)
        params_name = 'C' + VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True) + 'Parameters'
        _v = VFSL([locals()]+SL+[globals(), builtin],"InsertFileHeader",False)(VFSL([locals()]+SL+[globals(), builtin],"name",True), VFSL([locals()]+SL+[globals(), builtin],"extension",True), VFSL([locals()]+SL+[globals(), builtin],"todo",True)) # u'$InsertFileHeader($name, $extension, $todo)' on line 23, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$InsertFileHeader($name, $extension, $todo)')) # from line 23, col 1.
        write(u'''

#include "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 25, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 25, col 12.
        write(u'''.h"


/////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////  Declare Functions and IOCTLs supported  ///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

// Declare functions available
const SERVICE_FUNCTIONS ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 33, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 33, col 25.
        write(u'''::ServiceFunctions[] = 
{
    MSG_GET_ERROR_NAME,
    MSG_ABORT,
    MSG_RESET,
    MSG_GET_STATE, 
    MSG_GET_PARAMS, 
    MSG_SET_PARAMS,
    0
};

// Declare IOCTLS supported
const IOCTL_FUNCTIONS ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 45, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 45, col 23.
        write(u'''::IOCTLFunctions[] =
{
    {''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 47, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 47, col 6.
        write(u'''::PREPARE,            0,  0,  "Prepare",                ""},
    {''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 48, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 48, col 6.
        write(u'''::DO_ACTIVITY,        0,  0,  "Do Some Activity ",      ""},
    IOCTL_FUNCTIONS_TERMINATE
};

// Size info for functions
const SERVICE_SIZE_INFO ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 53, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 53, col 25.
        write(u'''::SizeInfo =
{
    sizeof(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"params_name",True) # u'${params_name}' on line 55, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${params_name}')) # from line 55, col 12.
        write(u'''), sizeof(INT32U),    // Param size,Param Item size,
                              0,              0,    // Stats Size, Stats Item Size
                              0,              0,    // Max Data, Max Data Item,
                                              0};   // Max Control Response size. Needed if this object is ever remote

// Create a table of error values and names
#include "enumstrdefs.h"
const ENUM_STRING ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 62, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 62, col 19.
        write(u'''::Errors[] = 
{
    #include "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True) # u'${srv.Name}' on line 64, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${srv.Name}')) # from line 64, col 16.
        write(u'''.Errors.h"
};


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////  ERROR TRANSLATION TABLE //////////////////////////
/////////////////////////////////////////////////////////////////////////////////
// Notice we do a catch-all of "Unable to home" on any other error except crash
// This is called from the function: 
//
//          OutputErrorCode = CHSMService::MapResponseCode(INT16U InputErrorCode,INT16U InputInfo1, INT16U InputInfo2)
//
// Input Error and Info of the function must match the table entries for the output 
// code of the table to be output. 
// INFO_DONT_CARE (0xffff) is reserved to signal not to require a match on that field.
// 
const HSM_SERVICE_ERROR_STRUCT ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 80, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 80, col 32.
        write(u'''::ErrorMap[] = 
{
    // Output Error Code                Input Error Code        Input Info 1          InputInfo 2
    { ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 83, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 83, col 7.
        write(u'''::UNEXPECTED_ERROR,        INFO_DONT_CARE        , INFO_DONT_CARE       ,INFO_DONT_CARE}, // any other error
    ERROR_STRUCT_TERMINATOR 
};


''')
        params = ['nSrvNo','pServiceName','pTask', 'pControlledObj']
        brief = 'Set initial vars in construction of object for transport type of service'
        pre_intend = ' '.rjust(len(VFSL([locals()]+SL+[globals(), builtin],"name",True)) * 2 + 3)
        _v = VFSL([locals()]+SL+[globals(), builtin],"InsertFunctionHeader",False)(VFSL([locals()]+SL+[globals(), builtin],"name",True), VFSL([locals()]+SL+[globals(), builtin],"name",True), VFSL([locals()]+SL+[globals(), builtin],"brief",True), VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$InsertFunctionHeader($name, $name, $brief, $params)' on line 91, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$InsertFunctionHeader($name, $name, $brief, $params)')) # from line 91, col 1.
        write(u'''
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 92, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 92, col 1.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 92, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 92, col 10.
        write(u'''(INT16U     nSrvNo,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 93, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 93, col 1.
        write(u'''const char *pServiceName,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 94, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 94, col 1.
        write(u'''CTask      *pTask,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 95, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 95, col 1.
        write(u'''CService   *pControlledObj)
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 96, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 96, col 1.
        write(u''': CHSMService(nSrvNo,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 97, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 97, col 1.
        write(u'''              pServiceName,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 98, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 98, col 1.
        write(u'''              pTask,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 99, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 99, col 1.
        write(u'''              NULL,
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 100, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 100, col 1.
        write(u'''              ErrorMap),
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 101, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 101, col 1.
        write(u'''// ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"bmarker",True) # u'${bmarker}' on line 101, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${bmarker}')) # from line 101, col 17.
        write(u''' CTOR_STATES
''')
        for StateList in VFSL([locals()]+SL+[globals(), builtin],"srv.StateLevelList",True): # generated from line 102, col 1
            for State in VFSL([locals()]+SL+[globals(), builtin],"StateList",True): # generated from line 103, col 1
                _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 104, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 104, col 1.
                _v = VFSL([locals()]+SL+[globals(), builtin],"State.Name",True) # u'${State.Name}' on line 104, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${State.Name}')) # from line 104, col 14.
                write(u'''State(this),
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 107, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 107, col 1.
        write(u'''// ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emarker",True) # u'${emarker}' on line 107, col 17
        if _v is not None: write(_filter(_v, rawExpr=u'${emarker}')) # from line 107, col 17.
        write(u'''
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"pre_intend",True) # u'${pre_intend}' on line 108, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${pre_intend}')) # from line 108, col 1.
        write(u'''m_pControlledObj(pControlledObj)
{
    // Setup the service information - INCLUDE errors pointer
    SET_SERVICE_INFO_EXT(ServiceFunctions, IOCTLFunctions, &SizeInfo, &m_Parameters, NULL, Errors);
}

''')
        initial = None
        sufix = '_STATE'
        _v = VFSL([locals()]+SL+[globals(), builtin],"InsertFunctionHeader",False)(VFSL([locals()]+SL+[globals(), builtin],"name",True), 'InitStates', 'Initialize the states', None, 'SYSSTATUS') # u"$InsertFunctionHeader($name, 'InitStates', 'Initialize the states', None, 'SYSSTATUS')" on line 116, col 1
        if _v is not None: write(_filter(_v, rawExpr=u"$InsertFunctionHeader($name, 'InitStates', 'Initialize the states', None, 'SYSSTATUS')")) # from line 116, col 1.
        write(u'''
SYSSTATUS ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 117, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 117, col 11.
        write(u'''::InitStates()
{
    //
    // We will initialize all our states
    // Send the HSM this state belongs, its parent state, and its enumerated state number
    //
    // ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"bmarker",True) # u'${bmarker}' on line 123, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${bmarker}')) # from line 123, col 8.
        write(u''' INIT_STATES
    SYSSTATUS16 ''')
        for StateList in VFSL([locals()]+SL+[globals(), builtin],"srv.StateLevelList",True): # generated from line 125, col 1
            for State in VFSL([locals()]+SL+[globals(), builtin],"StateList",True): # generated from line 126, col 1
                write(u'''    nStatus = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"State.Name",True) # u'${State.Name}' on line 127, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${State.Name}')) # from line 127, col 15.
                write(u'''State.Init(&PrimaryHSM, ''')
                if VFSL([locals()]+SL+[globals(), builtin],"State.Parent",True) != None: # generated from line 128, col 1
                    write(u'''&''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"State.Parent.Name",True) # u'${State.Parent.Name}' on line 129, col 2
                    if _v is not None: write(_filter(_v, rawExpr=u'${State.Parent.Name}')) # from line 129, col 2.
                    write(u'''State, ''')
                else: # generated from line 130, col 1
                    write(u'''NULL, ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"State.Name",True),"upper",False)() # u'${State.Name.upper()}' on line 133, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${State.Name.upper()}')) # from line 133, col 1.
                _v = VFSL([locals()]+SL+[globals(), builtin],"sufix",True) # u'${sufix}' on line 133, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${sufix}')) # from line 133, col 22.
                write(u''');
    ASSERT_RETURN_BAD_STATUS(nStatus);

''')
                if VFSL([locals()]+SL+[globals(), builtin],"State.Initial",True) == True: # generated from line 136, col 1
                    initial = VFSL([locals()]+SL+[globals(), builtin],"State.Name",True)
        write(u'''    // ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emarker",True) # u'${emarker}' on line 141, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${emarker}')) # from line 141, col 8.
        write(u'''

    // Set initial state of the  main HSM
    // ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"bmarker",True) # u'${bmarker}' on line 144, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${bmarker}')) # from line 144, col 8.
        write(u''' INITIAL_STATE
''')
        if VFSL([locals()]+SL+[globals(), builtin],"initial",True) == None: # generated from line 145, col 1
            write(u'''    // TODO : Initial state not found !!!
    // nStatus = PrimaryHSM.SetInitialState(this,&RootState);
''')
        else: # generated from line 148, col 1
            write(u'''    nStatus = PrimaryHSM.SetInitialState(this,&''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"initial",True) # u'${initial}' on line 149, col 48
            if _v is not None: write(_filter(_v, rawExpr=u'${initial}')) # from line 149, col 48.
            write(u'''State);
''')
        write(u'''    ASSERT_RETURN_BAD_STATUS(nStatus);
    // ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emarker",True) # u'${emarker}' on line 152, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${emarker}')) # from line 152, col 8.
        write(u'''

    return nStatus;
}
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_hsmService_cc= u'respond'

## END CLASS DEFINITION

if not hasattr(hsmService_cc, '_initCheetahAttributes'):
    templateAPIClass = getattr(hsmService_cc, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(hsmService_cc)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=hsmService_cc()).run()


