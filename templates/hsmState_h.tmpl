#*
    This is the template for the hsm states
*#
#from templates import genericHeaders
#extends genericHeaders.genericHeaders
#*
    This is the secret to eternal live 2/2
    
    Without this you will get no output from the
    def's in the parent class
*#
#implements respond

## ############################
## Get file header
## ############################
#set $todo              = 'TODO'
#set $service           = 'Service'
#set $state_name        = 'C' +  $state.Name + 'State'
#if $protected == False
#set $srv_name          = $srv.Name
#set $serv_name         = 'CHSM' + $srv.Name + $service
#set $file_name         = $srv.Name + '.' + $state_name
#else
#set $srv_name          = $srv.Name[1:]
#set $serv_name         = 'CHSM' + $srv.Name[1:] + $service
#set $file_name         = $srv.Name[1:] + '.' + $state_name
#end if
#set $intent            = '    '
#set $def_fct_key       = {'cmd', 'reset', 'resp', 'event', 'abort', 'timer', 'stdcmd'}
#set $def_fct           =   {
                            'cmd'       : 'Command',
                            'stdcmd'    : 'StdCommand',
                            'reset'     : 'Reset',
                            'resp'      : 'Response',
                            'event'     : 'Event',
                            'abort'     : 'Abort',
                            'timer'     : 'Timer'
                            }
#set $callbacks         =   {
                            'entry'     : 'OnEntry',
                            'active'    : 'OnActive',
                            'exit'      : 'OnExit'
                            }
$InsertFileHeader($file_name, $extension, $todo)


\#ifndef _${srv_name.upper()}_${state_name.upper()}_H
\#define _${srv_name.upper()}_${state_name.upper()}_H

\#include "CHSMServiceState.h"

// Forward declaration
class ${serv_name};

namespace ns${srv_name}${service}
{

$InsertClassHeader($state_name, $todo, $author, $intent)
    class ${state_name} : public CHSMServiceState
    {
    public:
    
        // Construct this state, send thing containing service
        ${state_name}(${serv_name} *pService): CHSMServiceState(),
                                                   m_pMyService(pService)
        {
        }
        
        ## ##########################################
        ## Callbacks
        ## ##########################################
#if $state.Callbacks.get('entry') == True
        HSM_SVC_STATE_RESPONSE  $callbacks.get('entry')(CServiceMessage *pMsg);
#end if
#if $state.Callbacks.get('active') == True
        HSM_SVC_STATE_RESPONSE  $callbacks.get('active')(CServiceMessage *pMsg);
#end if
#if $state.Callbacks.get('exit') == True
        void                    $callbacks.get('exit')();
#end if
        
    protected:
        
        ## ##########################################
        ## Default functions
        ## ##########################################
        
#for $fct in $def_fct_key
#if $state.Functions.get($fct) == True or $state.Functions.get('all') == True
        HSM_SVC_STATE_RESPONSE On${def_fct.get($fct)}Msg(CServiceMessage *pMsg);
#end if 
#end for
        
        // Get function for service pointer
        ${serv_name} *GetMyService() const
        {
            return m_pMyService;
        }

    private:
        // Set this state's containing service
        ${serv_name}  *m_pMyService;
    
    };
}
#endif
