#!/usr/bin/env python




#This is the secrete to eternal live 1/2
import os,sys
pwd = os.path.dirname(os.path.realpath(__file__))
sys.path.append(pwd)

##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from templates import genericHeaders
from genericHeaders import genericHeaders

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1343804777.226
__CHEETAH_genTimestamp__ = 'Wed Aug 01 09:06:17 2012'
__CHEETAH_src__ = 'hsmState_h.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Jul 27 15:25:09 2012'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class hsmState_h(genericHeaders):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(hsmState_h, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        #     This is the template for the hsm states
        # 
        #     This is the secret to eternal live 2/2
        #     
        #     Without this you will get no output from the
        #     def's in the parent class
        write(u'''
''')
        #  ############################
        #  Get file header
        #  ############################
        todo = 'TODO'
        service = 'Service'
        state_name = 'C' +  VFSL([locals()]+SL+[globals(), builtin],"state.Name",True) + 'State'
        if VFSL([locals()]+SL+[globals(), builtin],"protected",True) == False: # generated from line 20, col 1
            srv_name = VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True)
            serv_name = 'CHSM' + VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True) + VFSL([locals()]+SL+[globals(), builtin],"service",True)
            file_name = VFSL([locals()]+SL+[globals(), builtin],"srv.Name",True) + '.' + VFSL([locals()]+SL+[globals(), builtin],"state_name",True)
        else: # generated from line 24, col 1
            srv_name = VFN(VFSL([locals()]+SL+[globals(), builtin],"srv",True),"Name",True)[1:]
            serv_name = 'CHSM' + VFN(VFSL([locals()]+SL+[globals(), builtin],"srv",True),"Name",True)[1:] + VFSL([locals()]+SL+[globals(), builtin],"service",True)
            file_name = VFN(VFSL([locals()]+SL+[globals(), builtin],"srv",True),"Name",True)[1:] + '.' + VFSL([locals()]+SL+[globals(), builtin],"state_name",True)
        intent = '    '
        def_fct_key = {'cmd', 'reset', 'resp', 'event', 'abort', 'timer', 'stdcmd'}
        def_fct = {                            'cmd'       : 'Command',                            'stdcmd'    : 'StdCommand',                            'reset'     : 'Reset',                            'resp'      : 'Response',                            'event'     : 'Event',                            'abort'     : 'Abort',                            'timer'     : 'Timer'                            }
        callbacks = {                            'entry'     : 'OnEntry',                            'active'    : 'OnActive',                            'exit'      : 'OnExit'                            }
        _v = VFSL([locals()]+SL+[globals(), builtin],"InsertFileHeader",False)(VFSL([locals()]+SL+[globals(), builtin],"file_name",True), VFSL([locals()]+SL+[globals(), builtin],"extension",True), VFSL([locals()]+SL+[globals(), builtin],"todo",True)) # u'$InsertFileHeader($file_name, $extension, $todo)' on line 45, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$InsertFileHeader($file_name, $extension, $todo)')) # from line 45, col 1.
        write(u'''


#ifndef _''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"srv_name",True),"upper",False)() # u'${srv_name.upper()}' on line 48, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${srv_name.upper()}')) # from line 48, col 11.
        write(u'''_''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"state_name",True),"upper",False)() # u'${state_name.upper()}' on line 48, col 31
        if _v is not None: write(_filter(_v, rawExpr=u'${state_name.upper()}')) # from line 48, col 31.
        write(u'''_H
#define _''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"srv_name",True),"upper",False)() # u'${srv_name.upper()}' on line 49, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${srv_name.upper()}')) # from line 49, col 11.
        write(u'''_''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"state_name",True),"upper",False)() # u'${state_name.upper()}' on line 49, col 31
        if _v is not None: write(_filter(_v, rawExpr=u'${state_name.upper()}')) # from line 49, col 31.
        write(u'''_H

#include "CHSMServiceState.h"

// Forward declaration
class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"serv_name",True) # u'${serv_name}' on line 54, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${serv_name}')) # from line 54, col 7.
        write(u''';

namespace ns''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"srv_name",True) # u'${srv_name}' on line 56, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${srv_name}')) # from line 56, col 13.
        _v = VFSL([locals()]+SL+[globals(), builtin],"service",True) # u'${service}' on line 56, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${service}')) # from line 56, col 24.
        write(u'''
{

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"InsertClassHeader",False)(VFSL([locals()]+SL+[globals(), builtin],"state_name",True), VFSL([locals()]+SL+[globals(), builtin],"todo",True), VFSL([locals()]+SL+[globals(), builtin],"author",True), VFSL([locals()]+SL+[globals(), builtin],"intent",True)) # u'$InsertClassHeader($state_name, $todo, $author, $intent)' on line 59, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$InsertClassHeader($state_name, $todo, $author, $intent)')) # from line 59, col 1.
        write(u'''
    class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"state_name",True) # u'${state_name}' on line 60, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${state_name}')) # from line 60, col 11.
        write(u''' : public CHSMServiceState
    {
    public:
    
        // Construct this state, send thing containing service
        ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"state_name",True) # u'${state_name}' on line 65, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${state_name}')) # from line 65, col 9.
        write(u'''(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"serv_name",True) # u'${serv_name}' on line 65, col 23
        if _v is not None: write(_filter(_v, rawExpr=u'${serv_name}')) # from line 65, col 23.
        write(u''' *pService): CHSMServiceState(),
                                                   m_pMyService(pService)
        {
        }
        
''')
        #  ##########################################
        #  Callbacks
        #  ##########################################
        if VFN(VFSL([locals()]+SL+[globals(), builtin],"state.Callbacks",True),"get",False)('entry') == True: # generated from line 73, col 1
            write(u'''        HSM_SVC_STATE_RESPONSE  ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"callbacks",True),"get",False)('entry') # u"$callbacks.get('entry')" on line 74, col 33
            if _v is not None: write(_filter(_v, rawExpr=u"$callbacks.get('entry')")) # from line 74, col 33.
            write(u'''(CServiceMessage *pMsg);
''')
        if VFN(VFSL([locals()]+SL+[globals(), builtin],"state.Callbacks",True),"get",False)('active') == True: # generated from line 76, col 1
            write(u'''        HSM_SVC_STATE_RESPONSE  ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"callbacks",True),"get",False)('active') # u"$callbacks.get('active')" on line 77, col 33
            if _v is not None: write(_filter(_v, rawExpr=u"$callbacks.get('active')")) # from line 77, col 33.
            write(u'''(CServiceMessage *pMsg);
''')
        if VFN(VFSL([locals()]+SL+[globals(), builtin],"state.Callbacks",True),"get",False)('exit') == True: # generated from line 79, col 1
            write(u'''        void                    ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"callbacks",True),"get",False)('exit') # u"$callbacks.get('exit')" on line 80, col 33
            if _v is not None: write(_filter(_v, rawExpr=u"$callbacks.get('exit')")) # from line 80, col 33.
            write(u'''();
''')
        write(u'''        
    protected:
        
''')
        #  ##########################################
        #  Default functions
        #  ##########################################
        write(u'''        
''')
        for fct in VFSL([locals()]+SL+[globals(), builtin],"def_fct_key",True): # generated from line 89, col 1
            if VFN(VFSL([locals()]+SL+[globals(), builtin],"state.Functions",True),"get",False)(VFSL([locals()]+SL+[globals(), builtin],"fct",True)) == True or VFN(VFSL([locals()]+SL+[globals(), builtin],"state.Functions",True),"get",False)('all') == True: # generated from line 90, col 1
                write(u'''        HSM_SVC_STATE_RESPONSE On''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"def_fct",True),"get",False)(VFSL([locals()]+SL+[globals(), builtin],"fct",True)) # u'${def_fct.get($fct)}' on line 91, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${def_fct.get($fct)}')) # from line 91, col 34.
                write(u'''Msg(CServiceMessage *pMsg);
''')
        write(u'''        
        // Get function for service pointer
        ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"serv_name",True) # u'${serv_name}' on line 96, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${serv_name}')) # from line 96, col 9.
        write(u""" *GetMyService() const
        {
            return m_pMyService;
        }

    private:
        // Set this state's containing service
        """)
        _v = VFSL([locals()]+SL+[globals(), builtin],"serv_name",True) # u'${serv_name}' on line 103, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${serv_name}')) # from line 103, col 9.
        write(u'''  *m_pMyService;
    
    };
}
#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_hsmState_h= u'respond'

## END CLASS DEFINITION

if not hasattr(hsmState_h, '_initCheetahAttributes'):
    templateAPIClass = getattr(hsmState_h, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(hsmState_h)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=hsmState_h()).run()


